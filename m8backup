#!/bin/sh
#
# This script is intended to be executed as super user.
#

PROGNAME="m8backup"
AUTHNAME="Davide Lucchesi <davide@lucchesi.nl>"
SITEADDR="https://github.com/Odiobill/m8backup"
EDITDATE="2017-07-30"

# default parameters that can be overridden
EXCLUDING=""
SNAPSHOTS=30
SNAPSNAME="snapshot"
RSYNCPATH="/usr/bin/rsync"
RSYNCOPTS="-uae ssh --delete --numeric-ids"
OVERRIDER="server.conf"
LOCALPATH=""
WSTARTCMD=""
MSTARTCMD=""
YSTARTCMD=""

LOCKFILE="/var/run/$PROGNAME.lock"
TRGTNAME=""

help() {
	printf '%s - Dependency free backup server with data de-duplication using rsync and ssh\n' "$PROGNAME"
	printf 'Copyright (c) 2017 %s\n' "$AUTHNAME"
	printf 'Please visit %s for more information about this software.\n' "$SITEADDR"
	echo ""
	echo "Usage:"
	printf '\t%s -h|--help\n' "$0"
	printf '\t%s -o|--only <path> <target>\n' "$0"
	printf '\t%s <path>\n' "$0"
	echo ""
	echo "Create a directory within <path> named as the fqdn of any remote host that you want to backup."
	echo "If you want to backup local paths, the directory name doesn't matter."
	echo "Use the --only option to take snapshots only for a single host/target (useful for new entries)."
	echo ""
	echo "If a <path>.$PROGNAME file is found, default settings can be overridden from:"
	echo  ""
	printf 'SNAPSHOTS=%s\t# how many older snapshots to keep\n' "$SNAPSHOTS"
	printf 'SNAPSNAME="%s"\t# name of snapshot directory (%s-0 to %s-%s)\n' "$SNAPSNAME" "$SNAPSNAME" "$SNAPSNAME" "$SNAPSHOTS"
	printf 'EXCLUDING="%s"\t# a file that contains any path to exclude\n' "$EXCLUDING"
	printf 'RSYNCPATH="%s"\t# path to the rsync executable\n' "$RSYNCPATH"
	printf 'RSYNCOPTS="%s"\t# command line arguments for rsync\n' "$RSYNCOPTS"
	printf 'OVERRIDER="%s"\t# name of the file in the target directory used to override any of above settings for that entry\n' "$OVERRIDER"
	printf 'WSTARTCMD="%s"\t# external command to be executed if running on Monday\n' "$WSTARTCMD"
	printf 'MSTARTCMD="%s"\t# external command to be executed if running on the first day of the month\n' "$MSTARTCMD"
	printf 'YSTARTCMD="%s"\t# external command to be executed if running on the first day of the year\n' "$YSTARTCMD"
	echo ""
	echo "The *STARTCMD commands will receive the path of the latest snapshot as single command line argument."
	echo "To take snapshots of a local directory instead of a remote host, provide its path in an additional LOCALPATH parameter of the OVERRIDER file."
}

usage() {
	echo "Usage:"
	printf '\t%s -h|--help\n' "$0"
	printf '\t%s -o|--only <path> <target>\n' "$0"
	printf '\t%s <path>\n' "$0"
	echo ""
	echo "Please specify a target directory as the only parameter, or use the --only option."
}

if [ $# -ge 1 ]; then
	case $1 in
		-h|--help)
		help
		exit 0
		;;

		-o|--only)
		if [ $# -eq 3 ]; then
			TRGTPATH=$2
			TRGTNAME=$3
		else
			usage
			exit 1
		fi
		;;

		*)
		TRGTPATH=$1
		;;
	esac

	if [ -d $TRGTPATH ]; then
		DESTNAME=`basename "$TRGTPATH"`
		LOCKFILE="$LOCKFILE.$DESTNAME"
		TARGETDIR=${TRGTPATH%/}
		if [ -f "$TARGETDIR.$PROGNAME" ]; then
			. "$TARGETDIR.$PROGNAME"
		fi
	else
		printf 'Invalid directory "%s". ' "$TRGTPATH"
		usage
		exit 1
	fi
else
	usage
	exit 1
fi

if [ `id -u` != "0" ]; then
	echo "You need super user privileges to run this script. Exiting."
	exit 1
fi

if [ -f "$LOCKFILE" ]; then
	echo "Lock file \"$LOCKFILE\" already exists. Exiting."
	exit 1
else
	cat > "$LOCKFILE" << EOF
/dev/*
/proc/*
/run/*
/sys/*
/tmp/*
/var/lock/*
/var/run/*
EOF
fi

DWK=`date "+%u"`
DAY=`date "+%d"`
MNT=`date "+%m"`

DESTSNAPS=$SNAPSHOTS
# taking snapshots
ls $TARGETDIR | while read i; do
	SNAPSHOTS=$DESTSNAPS
	SRV=`basename $i`;

	EXECUTEIT=0
	if [ -z "$TRGTNAME" ]; then
		EXECUTEIT=1
	fi
	if [ "$TRGTNAME" = "$SRV" ]; then
		EXECUTEIT=1
	fi

	DSTPATH="$TARGETDIR/$SRV"
	if [ -d "$DSTPATH" ]; then
		# Save current parameters in case they will be replaced for this specific host
		OLD_EXCLUDING=$EXCLUDING
		OLD_SNAPSHOTS=$SNAPSHOTS
		OLD_SNAPSNAME=$SNAPSNAME
		OLD_RSYNCPATH=$RSYNCPATH
		OLD_RSYNCOPTS=$RSYNCOPTS
		OLD_OVERRIDER=$OVERRIDER
		OLD_WSTARTCMD=$WSTARTCMD
		OLD_MSTARTCMD=$MSTARTCMD
		OLD_YSTARTCMD=$YSTARTCMD
		if [ -f "$DSTPATH/$OVERRIDER" ]; then
			. $DSTPATH/$OVERRIDER
		fi
		if [ $EXECUTEIT -eq 1 ]; then
			# rotating snapshots
			mkdir -p $DSTPATH/$SNAPSNAME-0
			for day in $(seq 1 $(($SNAPSHOTS-1))); do
				mkdir -p $DSTPATH/$SNAPSNAME-$day
			done
			rm -rf $DSTPATH/$SNAPSNAME-$SNAPSHOTS
			for day in $(seq $SNAPSHOTS -1 2); do
				precday=$(($day - 1))
				mv $DSTPATH/$SNAPSNAME-$precday $DSTPATH/$SNAPSNAME-$day
			done
			mv $DSTPATH/$SNAPSNAME-0 $DSTPATH/$SNAPSNAME-1
			mkdir -p $DSTPATH/$SNAPSNAME-0
	
			# taking new snapshot
			if [ -z "$LOCALPATH" ] ; then
				SRCPATH="$SRV:/"
			else
				SRCPATH="$LOCALPATH/"
			fi
			if [ -x $RSYNCPATH ]; then
				if [ -f "$EXCLUDING" ]; then
					EXCLUDE="--exclude-from=$EXCLUDING"
				else
					EXCLUDE="--exclude-from=$LOCKFILE"
				fi
				GO=0
				if [ ! -z "$LOCALPATH" ]; then
					if [ ! -d "$LOCALPATH" ]; then
						echo "Invalid path \"$LOCALPATH\" for target \"$SRV\"."
					else
						GO=1
					fi
				else
					GO=1
				fi
				if [ $GO -eq 1 ]; then
					$RSYNCPATH $RSYNCOPTS --link-dest=../$SNAPSNAME-1 $EXCLUDE $SRCPATH $DSTPATH/$SNAPSNAME-0/
					if [ $? -ne 0 ]; then
						echo "$SRV - rsync exit code $?"
					fi
					if [ "$DWK" = "7" ]; then	# weekly script
						if [ ! -z $WSTARTCMD ]; then
							eval "$WSTARTCMD $DSTPATH/$SNAPSNAME-0"
						fi
					fi
					if [ "$DAY" = "01" ]; then	# monthly script
						if [ ! -z $WSTARTCMD ]; then
							eval "$MSTARTCMD $DSTPATH/$SNAPSNAME-0"
						fi
					fi
					if [ "$MNT" = "01" ]; then
						if [ "$DAY" = "01" ]; then	# yearly script
							if [ ! -z $WSTARTCMD ]; then
								eval "YWSTARTCMD $DSTPATH/$SNAPSNAME-0"
							fi
						fi
					fi
				fi
			else
				echo "Can't open $RSYNCPATH"
			fi
		else
			echo "Skipping target $SRV..."
		fi
		# Restore generic parameters if replaced by target-specific ones
		EXCLUDING=$OLD_EXCLUDING
		SNAPSHOTS=$OLD_SNAPSHOTS
		SNAPSNAME=$OLD_SNAPSNAME
		RSYNCPATH=$OLD_RSYNCPATH
		RSYNCOPTS=$OLD_RSYNCOPTS
		OVERRIDER=$OLD_OVERRIDER
		WSTARTCMD=$OLD_WSTARTCMD
		MSTARTCMD=$OLD_MSTARTCMD
		YSTARTCMD=$OLD_YSTARTCMD
		LOCALPATH=""
	fi
done

# done, cleaning up
rm "$LOCKFILE"
exit 0

